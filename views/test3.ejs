<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Progress Bar with Tailwind CSS</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/1.8.1/flowbite.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
</head>
<style>
  
/* Hide the default radio buttons */
input[type="radio"] {
  display: none;
}

/* Style the custom radio container */
.custom-radio {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
  cursor: pointer;
}

/* Style the custom radio indicator */
.custom-radio::before {
  content: "";
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 2px solid #007bff; /* Blue border color */
  border-radius: 50%; /* Make it round */
  margin-right: 10px; /* Space between indicator and label */
  transition: background-color 0.3s; /* Add transition for background color */
}

/* Change the appearance of the custom radio when checked */
input[type="radio"]:checked + .custom-radio::before {
  background-color: #007bff; /* Blue background color when checked */
}


.tab-container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
}

.tabs {
    display: flex;
    border-bottom: 1px solid #ccc;
}

.tab-button {
    flex: 1;
    padding: 10px 15px;
    background-color: #f0f0f0;
    border: none;
    cursor: pointer;
    outline: none;
}

.tab-button.active {
    background-color: #ddd;
}

.tab-content {
    position: relative;
}

.tab-panel {
    display: none;
    padding: 20px;
}

.tab-panel.active {
    display: block;
}

</style>
<body>

  <!-- radio buttons -->
  <div class="custom-radio">
    <input type="radio" id="radio1" name="radios">
    <label for="radio1">Option 1</label>
  </div>
  <div class="custom-radio">
    <input type="radio" id="radio2" name="radios">
    <label for="radio2">Option 2</label>
  </div>
  <div class="custom-radio">
    <input type="radio" id="radio3" name="radios">
    <label for="radio3">Option 3</label>
  </div>
  
  

    <!-- dropdown -->
    <div class="border-gray-200 border-b">
      <button data-collapse-toggle="more-details2" type="button" class="hover:underline text-lg text-black font-medium inline-flex w-screen justify-between">
        <span class="inline-flex">
          <span class="mr-2">Show more details</span>
          <span class="mr-2">icon</span>
        </span>
        <span class="">
          <svg class="w-2 h-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
          </svg>
        </span>
      </button>
      <div id="more-details2" class="pt-3 mt-3 space-y-2 hidden">
        <p>here is the details</p>
      </div>
    </div>

    <!-- button -->
    <div class="buttons mt-10">
        <a href="#" class="px-6 py-5 mt-10 bg-transparent border-gray-900 border rounded-full text-gray-900 hover:bg-gray-900 hover:text-white">Take the quiz</a>
    </div>


    <!-- Radial Chart -->
    <div class="py-6" id="radial-chart">
    </div>

    <!-- Progress bar -->
    <div class="w-full bg-gray-200 h-4">        
      <div id="progressbar" class="bg-[#8BA9AD] h-full rounded-r-lg transition-all ease-out duration-1000"></div>
    </div>

    <!-- Progress chart -->
    <div id="body">

    </div>

    <div class="tab-container">
      <div class="tabs">
          <button class="tab-button active" data-tab="tab1">Tab 1</button>
          <button class="tab-button" data-tab="tab2">Tab 2</button>
          <button class="tab-button" data-tab="tab3">Tab 3</button>
      </div>
      <div class="tab-content">
          <div class="tab-panel active" id="tab1">
              <h2>Tab 1 Content</h2>
              <p>This is the content of Tab 1.</p>
          </div>
          <div class="tab-panel" id="tab2">
              <h2>Tab 2 Content</h2>
              <p>This is the content of Tab 2.</p>
          </div>
          <div class="tab-panel" id="tab3">
              <h2>Tab 3 Content</h2>
              <p>This is the content of Tab 3.</p>
          </div>
      </div>
  </div>

</body>
</html>

<script>
// Progress bar
function createProgressChart(data) {
  // Get data
  const results = {
    'latent': {
      'width':'30%',
      'bgColor': 'linear-gradient(to right, #FF5A36, #FFA292)',
      'hoverBgColor': 'linear-gradient(to right, #f27e64, #e8bfb8)'
    },
    'emerging': {
      'width':'50%',
      'bgColor': 'linear-gradient(to right, #FFC42D, #FFEF60)',
      'hoverBgColor': 'linear-gradient(to right, #f27e64, #e8bfb8)'
    },
    'mature': {
      'width':'20%',
      'bgColor': 'linear-gradient(to right, #61C270, #61C270)',
      'hoverBgColor': 'linear-gradient(to right, #f27e64, #e8bfb8)'
    }
  }  

  // Create main container
  const progressContainer = document.createElement('div');
  progressContainer.classList.add('progress-container');
  progressContainer.style.width = '80%';
  progressContainer.style.margin = '20px auto';

  // Create progress bar outer container
  const progressBarOuter = document.createElement('div');
  progressBarOuter.classList.add('progress-bar-outer');
  progressBarOuter.style.backgroundColor = '#F3F3F3';
  progressBarOuter.style.height = '30px';
  progressBarOuter.style.borderRadius = '50px';
  progressBarOuter.style.padding = '5px';
  progressBarOuter.style.paddingLeft = '12px';
  progressBarOuter.style.paddingRight = '12px';
  progressBarOuter.style.display = 'flex';
  progressBarOuter.style.alignItems = 'center';
  progressBarOuter.style.boxShadow = '4px 4px 10px rgba(0, 0, 0, 0.5)';

  // Create inner bar 
  for (const r in results) {
    console.log(r)
    // Inner bar
    const innerBar = document.createElement('div');
    innerBar.classList.add('inner', r, `${r}-bar`);

    // Style inner bar
    innerBar.style.height = '75%';
    innerBar.style.transition = 'width 0.3s ease-in-out';
    innerBar.style.borderRadius = '50px';
    innerBar.style.margin = '2px';
    innerBar.style.width = results[r].width;    
    innerBar.style.backgroundImage= results[r].bgColor;

    // Style on mouse enter
    innerBar.addEventListener('mouseenter', () => {
      innerBar.style.backgroundImage = results[r].hoverBgColor;
    });

    // Style on mouse leave
    innerBar.addEventListener('mouseleave', () => {
      innerBar.style.backgroundImage= results[r].bgColor;
    });

    // Append
    progressBarOuter.appendChild(innerBar);    
  }

  // Create vertical lines
  const verticalLineContainer = document.createElement('div');
  verticalLineContainer.classList.add('vertical-line');
  verticalLineContainer.style.display = 'flex';
  verticalLineContainer.style['text-align'] = 'center';

  // Style vertical lines
  for (const r in results) {
    const line = document.createElement('div');
    line.classList.add('line', r);
    line.style.borderLeft = '1px solid #000'; // Adjust thickness and color as needed
    line.style.height = '10px'; // Adjust height as needed
    line.style.transform = 'translateX(50%)';
    line.style.width = results[r].width;
    verticalLineContainer.appendChild(line);
  }

  // Create x-axis labels
  const xAxisLabels = document.createElement('div');
  xAxisLabels.classList.add('x-axis-labels');
  xAxisLabels.style.display = 'flex';
  xAxisLabels.style['text-align'] = 'center';  

  // Style x-axis labels
  for (const r in results) {
    const label = document.createElement('span');
    label.classList.add(r.toLowerCase());
    label.textContent = r;
    label.style.width = results[r].width;
    xAxisLabels.appendChild(label);
  }

  // Append elements to the main container
  progressContainer.appendChild(progressBarOuter);
  progressContainer.appendChild(verticalLineContainer);
  progressContainer.appendChild(xAxisLabels);

  // Return the generated HTML structure
  return progressContainer;
}



// Create radial chart
const insertRadialChart = (containerId, label, color, bgColor, chartHeight, hollowSize, percentage) => {
  // Make sure apex chart is imported
  if (typeof ApexCharts == 'undefined') {
    return;
  }

  // Init chart options
  const chartOptions =  
  {
    series: [percentage],
    colors: [color],
    chart: {
      height: chartHeight,
      // width: "100%",
      type: "radialBar",
      sparkline: {
        enabled: true,
      },
    },
    plotOptions: {
      radialBar: {
        track: {
          background: bgColor,                
        },
        dataLabels: {
          show: true,
        },
        hollow: {
          margin: 0,
          size: hollowSize,
        },              
      },
    },     
    stroke: {
        lineCap: "round",
    },       
    labels: [label],
    tooltip: {
      enabled: false,
    }          
  }
    

  // Get container
  var chart = new ApexCharts(document.querySelector(`#${containerId}`), chartOptions);
  chart.render();
}

// Create radial chart
const insertHalfRadialChart = (containerId, label, color, bgColor, chartHeight, hollowSize, percentage) => {
  // Make sure apex chart is imported
  if (typeof ApexCharts == 'undefined') {
    return;
  }

  // Init chart options
  const chartOptions =  
  {
    series: [percentage],
    colors: [color],
    chart: {
      height: chartHeight,
      // width: "100%",
      type: "radialBar",
      sparkline: {
        enabled: true,
      },
    },
    plotOptions: {
      radialBar: {
        startAngle: -90, // Start angle for the half radial chart
        endAngle: 90,   // End angle for the half radial chart
        track: {
          background: bgColor,                
        },
        dataLabels: {
          show: true,
        },
        hollow: {
          margin: 0,
          size: hollowSize,
        },              
      },
    },     
    stroke: {
        lineCap: "round",
    },       
    labels: [label],
    tooltip: {
      enabled: false,
    }          
  }
    

  // Get container
  var chart = new ApexCharts(document.querySelector(`#${containerId}`), chartOptions);
  chart.render();
}

// Card
const createCard = (id, className, width, bgColor, boxShadow, borderRadius) => {
  // Create the card element
  const card = document.createElement('div');
  card.id = id;
  card.className = className;
  card.style.width = width;
  card.style.background = bgColor;
  card.style['border-radius'] = borderRadius;
  card.style['box-shadow'] = boxShadow

  return card;
}


// ApexCharts options and config
window.addEventListener("load", function() {
  console.log('sucess');
  console.log(document.getElementById("radial-chart"))

  insertRadialChart('radial-chart', 'emerging', '#89EFCD', '#FFE37E', '300px', '50%', 20)

  // Example usage: Append the progress container to a parent element
  const parentElement = document.getElementById('body'); // Replace 'parent' with the actual parent element ID
  const progressContainer = createProgressChart();
  parentElement.appendChild(progressContainer);

  // Card
  parentElement.appendChild(createCard('test', 'card mx-1 p-6', '200px', '#FFFFFF', '4px 4px 10px rgba(0, 0, 0, 0.5)', '10px'))
});

</script>  
